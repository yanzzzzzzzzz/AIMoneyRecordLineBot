@{
    ViewData["Title"] = "📅 記帳月曆";
}

<meta name="viewport" content="width=device-width, initial-scale=1">
<script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
<script charset="utf-8" src="https://static.line-scdn.net/liff/edge/2/sdk.js"></script>

<main id="app" class="container py-3">

    <!-- Loading Spinner -->
    <div v-if="loading" class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- Main Content -->
    <div v-else>
        <div class="text-center mb-3">
            <button class="btn btn-sm me-2" @@click="prevMonth">◀</button>
            <span class="fs-5">{{ year }}年{{ month + 1 }}月</span>
            <button class="btn btn-sm ms-2" @@click="nextMonth">▶</button>
        </div>

        <div class="calendar-grid mx-auto text-center">
            <div class="d-flex fw-bold">
                <div class="calendar-weekday" v-for="(d, i) in ['日','一','二','三','四','五','六']"
                     :class="getWeekdayClass(i)">
                    {{ d }}
                </div>
            </div>
            <div class="d-flex flex-wrap">
                <div v-for="(day, i) in calendarDays"
                     :key="i"
                     class="calendar-cell"
                     :class="getDateClass(day)"
                     @@click="selectDate(day.date)">
                    <div>{{ day.isToday ? '今天' : day.day }}</div>
                    <span v-if="hasData(day.date)" class="record-dot">•</span>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <h5 class="mb-3">記帳紀錄 - {{ selectedDate }}</h5>
            <div v-if="filteredRecords.length === 0">
                <p class="text-secondary">沒有記錄。</p>
            </div>
            <div class="card text-dark mb-3" v-for="r in filteredRecords" :key="r.id">
                <div class="card-body">
                    <h5 class="card-title">{{ r.description }}</h5>
                    <p class="card-text">{{ r.amount }} 元</p>
                </div>
            </div>
        </div>
    </div>
</main>

<style>
    body {
        background-color: #fff;
        color: #000;
        font-family: "Segoe UI", "PingFang TC", sans-serif;
    }

    .calendar-grid {
        max-width: 100%;
    }

    .calendar-weekday {
        width: 14.2857%;
        padding: 0.5rem 0;
        font-size: 0.9rem;
        font-weight: bold;
        color: #444;
    }

    .calendar-cell {
        width: 14.2857%;
        padding: 0.6rem 0;
        font-size: 1rem;
        position: relative;
        cursor: pointer;
        color: #000;
    }

    .calendar-cell.inactive {
        color: #bbb;
    }

    .calendar-cell.sunday {
        color: #d32f2f;
    }

    .calendar-cell.saturday {
        color: #f57c00;
    }

    .calendar-cell.selected {
        background-color: #1976d2;
        color: #fff;
        border-radius: 100px;
        font-weight: bold;
    }

    .record-dot {
        position: absolute;
        left: 50%;
        bottom: 4px;
        transform: translateX(-50%);
        font-size: 0.6rem;
        color: #1976d2;
    }

    .card {
        background-color: #f8f9fa;
    }

    .btn {
        background: transparent;
        border: none;
        color: #1976d2;
    }

        .btn:active {
            transform: scale(0.95);
        }
</style>

<script>
    async function initLiffAndFetchRecords(appCtx) {
        try {
            await liff.init({ liffId: '@Model.LiffId' });

            if (!liff.isLoggedIn()) {
                liff.login();
                return;
            }

            const profile = await liff.getProfile();
            console.log("登入成功：", profile);
            appCtx.profile.value = profile;

            const res = await fetch(`/api/ExpenseRecord/${profile.userId}`);
            if (!res.ok) throw new Error("載入資料失敗");

            const data = await res.json();
            console.log('data', data)
            appCtx.records.value = data.map(r => ({
                ...r,
                consumptionTime: new Date(r.consumptionTime).toISOString().split('T')[0]
            }));
        } catch (err) {
            console.error("LIFF 初始化失敗", err);
            alert("LIFF 初始化錯誤，請重新整理");
        }
    }

    const { createApp, ref, computed, onMounted } = Vue;

    createApp({
        setup() {
            const today = new Date();
            const todayString = today.toISOString().split('T')[0];

            const year = ref(today.getFullYear());
            const month = ref(today.getMonth());
            const selectedDate = ref(todayString);
            const profile = ref(null);
            const records = ref([]);
            const loading = ref(true);

            const filteredRecords = computed(() =>
                records.value.filter(r => r.consumptionTime === selectedDate.value)
            );

            const hasData = (date) => records.value.some(r => r.consumptionTime === date);

            const calendarDays = computed(() => {
                const result = [];
                const firstDay = new Date(year.value, month.value, 1);
                const startDayOfWeek = firstDay.getDay();
                const totalDays = new Date(year.value, month.value + 1, 0).getDate();

                const prevLastDate = new Date(year.value, month.value, 0).getDate();
                for (let i = startDayOfWeek - 1; i >= 0; i--) {
                    const d = new Date(year.value, month.value - 1, prevLastDate - i);
                    result.push({
                        day: d.getDate(),
                        date: d.toISOString().split('T')[0],
                        inCurrentMonth: false,
                        weekday: d.getDay(),
                        isToday: d.toISOString().split('T')[0] === todayString
                    });
                }

                for (let i = 1; i <= totalDays; i++) {
                    const d = new Date(year.value, month.value, i);
                    result.push({
                        day: i,
                        date: d.toISOString().split('T')[0],
                        inCurrentMonth: true,
                        weekday: d.getDay(),
                        isToday: d.toISOString().split('T')[0] === todayString
                    });
                }

                while (result.length < 42) {
                    const d = new Date(year.value, month.value + 1, result.length - (startDayOfWeek + totalDays) + 1);
                    result.push({
                        day: d.getDate(),
                        date: d.toISOString().split('T')[0],
                        inCurrentMonth: false,
                        weekday: d.getDay(),
                        isToday: d.toISOString().split('T')[0] === todayString
                    });
                }

                return result;
            });

            const getDateClass = (day) => {
                const classes = [];
                if (!day.inCurrentMonth) classes.push('inactive');
                if (day.weekday === 0) classes.push('sunday');
                if (day.weekday === 6) classes.push('saturday');
                if (day.date === selectedDate.value) classes.push('selected');
                return classes.join(' ');
            };

            const getWeekdayClass = (i) => {
                if (i === 0) return 'sunday';
                if (i === 6) return 'saturday';
                return '';
            };

            const selectDate = (date) => selectedDate.value = date;

            const prevMonth = () => {
                if (month.value === 0) {
                    month.value = 11;
                    year.value--;
                } else {
                    month.value--;
                }
            };

            const nextMonth = () => {
                if (month.value === 11) {
                    month.value = 0;
                    year.value++;
                } else {
                    month.value++;
                }
            };

            onMounted(async () => {
                loading.value = true;
                await initLiffAndFetchRecords({ profile, records });
                loading.value = false;
            });

            return {
                year,
                month,
                selectedDate,
                profile,
                records,
                filteredRecords,
                calendarDays,
                hasData,
                getDateClass,
                getWeekdayClass,
                selectDate,
                prevMonth,
                nextMonth,
                loading
            };
        }
    }).mount('#app');
</script>
