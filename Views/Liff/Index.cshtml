@{
    ViewData["Title"] = "📅 記帳月曆";
}

<meta name="viewport" content="width=device-width, initial-scale=1">

<main id="app" class="container">
    <div class="mb-2">
        <h4 class="mb-2">📅 記帳月曆</h4>
        <div class="calendar-grid border rounded p-3 mx-auto">
            <div class="d-flex fw-bold text-center mb-2">
                <div class="flex-fill" v-for="d in ['日', '一', '二', '三', '四', '五', '六']">{{ d }}</div>
            </div>
            <div class="d-flex flex-wrap text-center position-relative">
                <div v-for="(day, i) in calendarDays"
                     :key="i"
                     class="calendar-cell border position-relative"
                     :class="getDateClass(day)"
                     @@click="selectDate(day.date)">
                    {{ day.day }}
                    <span v-if="hasData(day.date) && day.date !== selectedDate" class="record-dot">•</span>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h4>📘 記帳紀錄 - {{ selectedDate }}</h4>
        <div v-if="filteredRecords.length === 0">
            <p class="text-muted">此日尚無記錄</p>
        </div>
        <div class="card mb-3" v-for="r in filteredRecords" :key="r.id">
            <div class="card-body">
                <h5 class="card-title">{{ r.title }}</h5>
                <p class="card-text">{{ r.amount }} 元</p>
            </div>
        </div>
    </div>
</main>

<style>
    body {
        background-color: #f9f9f9;
        margin: 0;
        font-family: "Segoe UI", Roboto, sans-serif;
    }

    .calendar-grid {
        max-width: 100%;
        width: 100%;
    }

    .calendar-cell {
        width: 14.2857%;
        padding: 0.6rem 0;
        font-size: 0.9rem;
        cursor: pointer;
        box-sizing: border-box;
    }

    .text-muted {
        color: #ccc !important;
    }

    .selected-day {
        background-color: #0d6efd !important;
        color: #fff !important;
        font-weight: bold;
        border-radius: 6px;
        border: 2px solid #084298;
    }

    .record-dot {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        bottom: 1px;
        font-size: 0.9rem;
        color: #dc3545;
        line-height: 1;
    }


    .calendar-cell.bg-light {
        background-color: #eaf4ff !important;
    }

    .container {
        max-width: 600px;
        margin: auto;
    }
</style>

<script>
    const { createApp, ref, computed } = Vue;

    createApp({
        setup() {
            const today = new Date().toISOString().split('T')[0];
            const selectedDate = ref(today);

            const records = ref([
                { id: 1, title: '早餐', amount: 200, consumptionTime: '2025-05-12' },
                { id: 2, title: '午餐', amount: 300, consumptionTime: '2025-05-12' },
                { id: 3, title: '晚餐', amount: 150, consumptionTime: '2025-05-13' },
                { id: 4, title: '便當', amount: 120, consumptionTime: '2025-05-20' }
            ]);

            const filteredRecords = computed(() => {
                return records.value.filter(r => r.consumptionTime === selectedDate.value);
            });

            const hasData = (date) => {
                return records.value.some(r => r.consumptionTime === date);
            };

            const calendarDays = computed(() => {
                const result = [];
                const baseDate = new Date(selectedDate.value);
                baseDate.setDate(1);
                const year = baseDate.getFullYear();
                const month = baseDate.getMonth();

                const firstDay = new Date(year, month, 1);
                const lastDay = new Date(year, month + 1, 0);
                const startDayOfWeek = firstDay.getDay();
                const totalDays = lastDay.getDate();

                const prevLastDay = new Date(year, month, 0).getDate();
                for (let i = startDayOfWeek - 1; i >= 0; i--) {
                    const d = new Date(year, month - 1, prevLastDay - i);
                    result.push({ day: d.getDate(), date: d.toISOString().split('T')[0], inCurrentMonth: false });
                }

                for (let i = 1; i <= totalDays; i++) {
                    const d = new Date(year, month, i);
                    result.push({ day: i, date: d.toISOString().split('T')[0], inCurrentMonth: true });
                }

                while (result.length < 42) {
                    const d = new Date(year, month + 1, result.length - (startDayOfWeek + totalDays) + 1);
                    result.push({ day: d.getDate(), date: d.toISOString().split('T')[0], inCurrentMonth: false });
                }

                return result;
            });

            const getDateClass = (day) => {
                if (day.date === selectedDate.value) {
                    return 'selected-day';
                }

                return {
                    'bg-light': hasData(day.date),
                    'text-muted': !day.inCurrentMonth
                };
            };

            const selectDate = (date) => {
                selectedDate.value = date;
            };

            return {
                selectedDate,
                records,
                filteredRecords,
                calendarDays,
                hasData,
                getDateClass,
                selectDate
            };
        }
    }).mount('#app');
</script>
